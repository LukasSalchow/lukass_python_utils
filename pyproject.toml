[tool.poetry]
name = "lukass_python_utils"
version = "0.0.0"
description = "You can use this template as the basis for your new project. It contains all tools required for development including a CI configuration and static analysis tools."
authors = [
  "alexander.bruhn <alexander.bruhn@t-systems.com>",
  "julian.maluck <julian.maluck@t-systems.com>",
  "hussain.kanafani <hussain.kanafani@t-systems.com>",
  "stefan.swoboda <stefan.swoboda@t-systems.com>"
  ]
readme = "README.md"

packages = [
  {include = "lukass_python_utils", from="src"},
]

[virtualenvs]
create = true
in-project = true

[tool.poetry.dependencies]
python = "~3.10" 

[tool.poetry.group.dev.dependencies]
mypy = "^1.3.0"
ruff = "^0.0.289"
pytest = "^7.3.2"
hypothesis = "^6.78.2"
pre-commit = "^3.3.3"
coverage = {extras = ["toml"], version = "^7.2.7"}
poethepoet = "^0.20.0"
black = "^24.4.2"
nbqa = "^1.7.0"
pytest-cov = "^4.1.0"
mkdocs-material = "^9.4.2"
python-semantic-release = "^9.7.1"

[tool.coverage.run]
parallel = true
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]

[tool.coverage.html]
directory = "cov_html"

[tool.pytest.ini_options]
minversion = "6.0.0rc1"
testpaths = [
  "tests",
]
pythonpath = [
  "src"
]
markers = [
    "integration: mark an integration test",
    "extras: mark a test that needs extra dependencies"
]

[tool.mypy]
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
follow_imports = "silent"

[tool.black]
line-length = 120
target_version = ["py310"]
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.pytest_cache
    | \.mypy_cache
    | \.venv
    | venv
    | _build
    | build
    | dist
    | joblib
  )/
)
'''

[tool.ruff]
src = ["src"]

extend-exclude = ["tests"]

select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "S",    # flake8-bandit
    "N",    # pep8-naming
    "BLE",  # flake8-blind-except
    "A",    # flake8-builtins
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "SLF",  # flake8-self
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "PD",   # pandas-vet
    "PERF", # perflint
    "PGH",  # pygrep-hooks
]
ignore = [
    "E501",  # line too long, handled by black
]

fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT"
]
unfixable = []

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# set python target version from cookiecutter
target-version = "py310"  # noqa

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]

[tool.poe.tasks]
unit = "pytest -m 'not extras and not integration' tests --cov -p no:warnings"
int = "pytest tests --cov -p no:warnings"
_cov_run = "coverage run --source src/lukass_python_utils -m pytest -m 'not integration' tests/"
_cov_report = "coverage html"
cov = ["_cov_run", "_cov_report"]
_static_black = "black --check src tests"
_static_ruff = "ruff check src"
_static_nbqa = "nbqa ruff src"
static = ["_static_black", "_static_ruff", "_static_nbqa"]
_fix_ruff = "ruff check src --fix"
_fix_nbqa = "nbqa ruff src --fix"
_fix_black = "black src tests"
fix = ["_fix_ruff",  "_fix_nbqa", "_fix_black"] # The order is important
typecheck = "mypy --check-untyped-defs --no-implicit-optional --show-error-codes src"
qa = ["typecheck", "static", "unit", "int"]
docs = "mkdocs build --strict"
releasecheck = 'semantic-release -v --noop version --print'
semantic-release = "semantic-release version --no-vcs-release"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.semantic_release]
assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
tag_format = "v{version}"
version_toml = ["pyproject.toml:tool.poetry.version"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
domain = "gitlab.devops.telekom.de"
type = "gitlab"
ignore_token_for_push = true
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = false
